
    useEffect(() => {
        const handlePopState = (event) => {
            if (event.state) {
                console.log('Navigated using browser back or forward button.');
                // Handle back or forward navigation here
                console.log('Current route:', history.pathname);
                SpeechRecognition.abortListening();
                SpeechRecognition.stopListening();
                clearInterval(timeoutSpeechBreak);
                clearInterval(StopPlay);
                StopPlay = null;
                //  clearInterval(firstStopPlayTimer);
                try {
                    // stream.getTracks()[0].stop();
                    stream.getTracks() // get all tracks from the MediaStream
                        .forEach(track => track.stop()); // stop each of them
                    // useReactMediaRecorder.stop();
                    window.playerG.pause();
                    firstplay = true;
                } catch (error) {
                    console.log(error)
                }
            }
        };

        // Listen for popstate event (triggered by back/forward buttons)
        window.addEventListener('popstate', handlePopState);

        // Cleanup the event listener when the component unmounts
        return () => {
            window.removeEventListener('popstate', handlePopState);
        };
    }, [history]);





    useEffect(() => {
        // Function to be called when back or forward is clicked
        const handlePopState = (event) => {
            console.log('Back or Forward button clicked!');
            window.location.reload();
            stream.getTracks() // get all tracks from the MediaStream
                .forEach(track => track.stop()); // stop each of them
        };

        // Add event listener for popstate (back/forward navigation)
        window.addEventListener('popstate', handlePopState);

        // Cleanup the event listener when the component is unmounted
        return () => {
            window.removeEventListener('popstate', handlePopState);
        };
    }, [history]);








        useEffect(() => {
        const handleBeforeUnload = (event) => {
            const confirmationMessage = 'Are you sure you want to leave this page?';
            event.preventDefault();
            event.returnValue = confirmationMessage; // For modern browsers
             alert("kjnknkn"); // For older browsers
        };

        // Check if window is defined to avoid SSR issues
        if (typeof window !== 'undefined') {
            window.addEventListener('beforeunload', handleBeforeUnload);
        }
      

        return () => {
            if (typeof window !== 'undefined') {
                window.removeEventListener('beforeunload', handleBeforeUnload);
            }
        };
    }, []);





//this code is for when user wants to leave current page 
// in that case thise will give them for a confirmation popup if they want or navigation

    useEffect(() => {
        const handleBeforeUnload = (event) => {
            const confirmationMessage = 'Are you sure you want to leave this page?';
            event.returnValue = confirmationMessage; // For modern browsers
            return confirmationMessage; // For older browsers
        };

        const handleRouteChange = (url) => {
            const confirmationMessage = 'Are you sure you want to leave this page?';
            const confirmLeave = window.confirm(confirmationMessage);
            if (!confirmLeave) {
                // Prevent navigation: do nothing or stay on the current route
                history.push(window.location.pathname); // Redirects back to the current path
            }
        };

        // Listen for beforeunload events
        window.addEventListener('beforeunload', handleBeforeUnload);

        // Custom function to intercept link clicks
        const interceptLinks = () => {
            const links = document.querySelectorAll('a'); // Select all anchor tags
            links.forEach((link) => {
                link.addEventListener('click', (e) => {
                    const confirmationMessage = 'Are you sure you want to leave this page?';
                    if (!window.confirm(confirmationMessage)) {
                        e.preventDefault(); // Prevent the default link action
                    }
                });
            });
        };

        interceptLinks(); // Call the function to add listeners to links

        return () => {
            // Cleanup the event listeners on component unmount
            window.removeEventListener('beforeunload', handleBeforeUnload);
        };
    }, [history]);

















//back button codes && confirmation popup codes..
    useEffect(() => {
        const handleBeforeUnload = (event) => {
            const confirmationMessage = 'Are you sure you want to leave this page?';
            event.returnValue = confirmationMessage; // For modern browsers
            return confirmationMessage; // For older browsers
        };

        // Listen for beforeunload events
        if (isloading == false) {
            window.addEventListener('beforeunload', handleBeforeUnload);
        }


        // Function to intercept link clicks
        const interceptLinks = () => {
            const links = document.querySelectorAll('a'); // Select all anchor tags
            links.forEach((link) => {
                const originalHref = link.getAttribute('href'); // Store the original href
                link.addEventListener('click', (e) => {
                    const confirmationMessage = 'Are you sure you want to leave this page?';
                    if (!window.confirm(confirmationMessage)) {
                        e.preventDefault(); // Prevent the default link action
                    } else {
                        // Allow the navigation if confirmed
                        history.push(originalHref); // Use router to navigate
                    }
                });
            });
        };

        interceptLinks(); // Call the function to add listeners to links

        return () => {
            // Cleanup the event listeners on component unmount
            window.removeEventListener('beforeunload', handleBeforeUnload);
        };
    }, [history]);



    useEffect(() => {
        const handlePopState = (event) => {
            if (event.state) {
                alert('Navigated using browser back or forward button.');
            }
        };

        // Listen for popstate event (triggered by back/forward buttons)
        window.addEventListener('popstate', handlePopState);

        // Cleanup the event listener when the component unmounts
        return () => {
            window.removeEventListener('popstate', handlePopState);
        };
    }, [history]);
